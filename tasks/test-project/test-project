#!/usr/bin/env node
/* eslint-env node, es6*/
//@ts-check
const path = require('path')

const execa = require('execa')
const Listr = require('listr')
const VerboseRenderer = require('listr-verbose-renderer')
const rimraf = require('rimraf')
const yargs = require('yargs')

const {
  addFrameworkDepsToProject,
  copyFrameworkPackages,
} = require('./frameworkLinking')
const { webTasks, apiTasks } = require('./tasks')
const { getExecaOptions } = require('./util')

const args = yargs
  .usage('Usage: $0 <project directory> [option]')
  .option('name', { default: 'blog-test-project', type: 'string', alias: 'n' })
  .option('typescript', {
    alias: 'ts',
    default: false,
    type: 'boolean',
    describe: 'Generate a TypeScript project. JavaScript by default.',
  })
  .option('link', {
    default: false,
    type: 'boolean',
    describe:
      'Link the current checked out branch of the framework in the project',
  })
  .option('verbose', {
    default: false,
    type: 'boolean',
    describe: 'Verbose output',
  })
  .option('clean', {
    default: false,
    type: 'boolean',
    describe: 'Delete existing directory, and recreate project',
  })
  .option('canary', {
    default: false,
    type: 'boolean',
    describe: 'Upgrade project to latest canary version',
  })
  .help()
  .strict().argv

const { name, typescript, canary, link, verbose, clean } = args

const choosenPath = args._

const OUTPUT_PROJECT_PATH = path.resolve(
  choosenPath.length >= 1
    ? String(choosenPath).replace(/,/g, '-')
    : path.join(__dirname, '../../', name)
)
const RW_FRAMEWORKPATH = path.join(__dirname, '../../')

const createProject = async () => {
  if (clean) {
    rimraf.sync(OUTPUT_PROJECT_PATH)
  }

  let cmd = `yarn babel-node packages/create-redwood-app/src/create-redwood-app.js ${OUTPUT_PROJECT_PATH}`

  // We create a ts project and convert using ts-to-js at the end if typescript flag is false
  return execa(
    cmd,
    ['--no-yarn-install', '--typescript', '--overwrite'],
    getExecaOptions(RW_FRAMEWORKPATH)
  )
}

const globalTasks = () =>
  new Listr(
    [
      {
        title: `Installing script packages`,
        task: async () => {
          return execa(
            'yarn install',
            [],
            getExecaOptions(path.resolve(__dirname))
          )
        },
      },
      {
        title: 'Creating project',
        task: () => createProject(),
      },
      {
        title: '[link] Building Redwood framework',
        task: async () => {
          try {
            await execa(
              'yarn build:clean && yarn build',
              [],
              getExecaOptions(RW_FRAMEWORKPATH)
            )
          } catch (e) {
            console.log('Failed to build framework...')
            console.log()
            console.log(
              'Please check your branch is building with yarn build:clean && yarn build'
            )
            throw new Error('Failed to build framework')
          }
        },
        enabled: () => link,
      },
      {
        title: '[link] Adding framework dependencies to project',
        task: () =>
          addFrameworkDepsToProject(RW_FRAMEWORKPATH, OUTPUT_PROJECT_PATH),
        enabled: () => link,
      },
      {
        title: 'Installing node_modules',
        task: async () => {
          return execa(
            'yarn install',
            ['--non-interactive', !verbose && '--silent'].filter(Boolean),
            getExecaOptions(OUTPUT_PROJECT_PATH)
          )
        },
      },
      {
        title: '[link] Copying framework packages to project',
        // @NOTE: we do this twice, because we want to use the latest generators here
        // and re-sync after the tailwind setup command
        task: () =>
          copyFrameworkPackages(RW_FRAMEWORKPATH, OUTPUT_PROJECT_PATH),
        enabled: () => link,
      },
      {
        title: 'Upgrading to latest canary version',
        task: async () => {
          return execa(
            'yarn rw upgrade -t canary',
            [],
            getExecaOptions(OUTPUT_PROJECT_PATH)
          )
        },
        enabled: () => canary && !link,
      },
      {
        title: 'Apply web codemods',
        task: () => webTasks(OUTPUT_PROJECT_PATH),
      },
      {
        title: 'Apply api codemods',
        task: () => apiTasks(OUTPUT_PROJECT_PATH),
      },
      {
        title: '[link] Copy local framework files again',
        // @NOTE: use rwfw, because calling the copy function doesn't seem to work here
        task: () =>
          execa(
            'yarn rwfw project:copy',
            [],
            getExecaOptions(OUTPUT_PROJECT_PATH)
          ),
        enabled: () => link,
      },
      {
        title: 'Convert to JS',
        task: async () => {
          return execa(
            'yarn rw ts-to-js',
            [],
            getExecaOptions(OUTPUT_PROJECT_PATH)
          )
        },
        enabled: () => !typescript,
      },
      {
        title: 'All done!',
        task: async () => {
          console.log()
          console.log('-'.repeat(30))
          console.log()
          console.log('âœ… Success your project has been generated at:')
          console.log(OUTPUT_PROJECT_PATH)
          console.log()
          console.log('-'.repeat(30))
        },
      },
    ],
    {
      exitOnError: true,
      renderer: verbose && VerboseRenderer,
    }
  )

globalTasks()
  .run()
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })
